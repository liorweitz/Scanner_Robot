# -*- coding: utf-8 -*-
"""IR sensor curve fitting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16jKP3qbFQ8zRWWzAUEa94iR2JX9uDTwU
"""

from numpy import arange
from pandas import read_csv
from scipy.optimize import curve_fit
from matplotlib import pyplot
import numpy as np

x=np.array([0.0125, 0.02, 0.025, 0.0333, 0.04, 0.05, 0.065, 0.1, 0.1233])
y=np.array([0.404, 0.558, 0.731, 0.923, 1.038, 1.307, 1.635, 2.327, 2.73])

def linear(x, a, b):
  return a*x+b

def polynom(x,a2,a1,a0):
  return a2*x**2+a1*x+a0

popt_lin, pcov_lin=curve_fit(linear, x, y)
a,b=popt_lin #parameters
#pcov is the covariance matrix of the parameters. its diagonal is the variance of each parameter. 
#the standart deviation, ie the uncertainty of each parameter, is the square root of the variance.
a_err,b_err=np.sqrt(np.diag(pcov_lin))

popt_pol, pcov_pol=curve_fit(polynom, x, y)
a2,a1,a0=popt_pol 
a2_err,a1_err, a0_err=np.sqrt(np.diag(pcov_pol))

pyplot.scatter(x, y)
# define a sequence of inputs between the smallest and largest known inputs
x_line = arange(min(x), max(x), 0.005)
# calculate the output for the range
y_line = linear(x_line, a, b)
y_pol = polynom(x_line, a2, a1, a0)
# create a line plot for the mapping function
pyplot.plot(x_line, y_line, color='red')
pyplot.plot(x_line, y_pol, color='green')
fig1 = pyplot.gcf()
pyplot.show()
fig1.savefig("IR sensor curve fitting.png", dpi=200)

print('y = %.2f * x + %.2f' % (a, b))
print ('a error is: {}.'.format(a_err))
print ('b error is: {}.'.format(b_err))

print('y = %.2f * x^2 + %.2f * x + %.2f' % (a2, a1, a0))
print ('a2 error is: %.2f.' %(a2_err))
print ('a1 error is: %.2f.'%(a1_err))
print ('a0 error is: %.2f.'%(a0_err))